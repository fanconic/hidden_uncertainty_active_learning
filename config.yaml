# Semester Project 2 at ETH
# Hidden Uncertainty for Active Learning
# For further questions contact Claudio Fanconi, fanconic@ethz.ch

name: "cifar10_new"

random_state: [3, 11, 42]
save_plot: False
save_df: True
runs: 3
week: 6

training:
    # active learning heuristic
    heuristic: "random"
    reduction: "sum"
    shuffle_prop: 0.2

    # Neural Network Training
    batch_size: 64
    epochs: 100
    
    #Active learning steps
    ndata_to_label: [100, 200, 200, 200, 200, 1000, 2000, 2000, 2000, 2000, 10000, 10000, 10000, 10000, 0]
    iterations: 15
    initially_labelled: 100
    initially_balanced: True
    verbose: False

    # Early stopping
    lr_reduce_factor: 0.1
    patience_lr_reduce: 15
    early_stopping: True
    load_best_model: True
    patience_early_stopping: 25

data:
    # Dataset parameters
    dataset: 'cifar10'
    nb_classes: 10
    img_rows: 32
    img_cols: 32
    img_channels: 3
    val_size: 0.2

    # Augmentation
    augmentation: True
    rgb_normalization: True
    mean: [0.49139968, 0.48215827, 0.44653124] #CS [0.28689554, 0.32513303, 0.28389177]
    std: [0.24703233, 0.24348505, 0.26158768] #CS [0.18696375, 0.19017339, 0.18720214] 
    path: "/srv/beegfs02/scratch/density_estimation/data/fanconic/CityScapes" #only applies to CityScapes
    ignore_label: 255 # only for sematic segmenation

model:
    ensemble: 1 #set to 1 for no ensemble
    name: "resnet18"
    mir_configs: # only applies if name == MIR
        backbone: "MLP"
        reconstruction_weight: 1.0
        density_model: "knn"
        warmup: False
        feature_dims: 512
        normalize_features: True
        dim_reduction: -1
        decoder_bn: True
        num_res_blocks: 3

        # Greedy Search
        greedy_search: False
        search_step_size: 100

        # KNN
        knn_weights: "uniform"
        knn_metric: "euclidean"
        knn_neighbours: 5
    
    # Data sizes - need to be the same as in "data"
    input_height: 32
    input_width: 32
    input_channels: 3
    output_size: 10

    # Layers for DNN and CNNS
    hidden_layers: [128, 128]
    kernel_sizes: [4, 4] # only applied if a (B)CNN is used
    dropout_probabilities: [0.05, 0.5] #[0.25, 0.5]
    use_bias: True

    # Monte Carlo Dropout parameters
    mc_dropout: False # used for MC dropout
    mc_iterations: 1 # iterations for MC dropout

    # BNN KL divergence loss
    kl_div_weight: 0.01 # only used for B(C)NN, to weight the kl_div loss

    #Pretrained
    pretrained: False

optimizer:
    lr: 0.001
    momentum: 0.9
    weight_decay: 0.0005
    betas: [0.9, 0.999]